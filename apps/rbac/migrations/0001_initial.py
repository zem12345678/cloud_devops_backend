# Generated by Django 2.2.14 on 2020-09-25 16:16

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(default='', max_length=20, verbose_name='姓名')),
                ('mobile', models.CharField(default='', max_length=11, verbose_name='手机号码')),
                ('email', models.EmailField(max_length=50, verbose_name='邮箱')),
                ('image', models.ImageField(blank=True, default='image/vue.gif', null=True, upload_to='static/%Y/%m')),
                ('position', models.CharField(blank=True, max_length=50, null=True, verbose_name='职位')),
                ('id_rsa_key', models.TextField(null=True)),
                ('id_rsa_pub', models.TextField(null=True)),
            ],
            options={
                'verbose_name': '用户信息',
                'verbose_name_plural': '用户信息',
                'ordering': ['id'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ApiHttpMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=128, null=True, verbose_name='名字')),
                ('createtime', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updatetime', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('remark', models.TextField(blank=True, default='', null=True, verbose_name='备注')),
                ('method', models.CharField(max_length=32, unique=True, verbose_name='HTTP Method')),
            ],
            options={
                'verbose_name': 'API Method',
                'verbose_name_plural': 'API Method',
                'db_table': 'api_http_method',
            },
        ),
        migrations.CreateModel(
            name='ApiPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('createtime', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updatetime', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('remark', models.TextField(blank=True, default='', null=True, verbose_name='备注')),
                ('name', models.CharField(max_length=32, unique=True, verbose_name='API名称')),
                ('uri', models.CharField(max_length=100, verbose_name='HTTP URI')),
                ('api_http_methods', models.ManyToManyField(blank=True, related_name='api_http_methods', to='rbac.ApiHttpMethod', verbose_name='API权限')),
            ],
            options={
                'verbose_name': 'API权限',
                'verbose_name_plural': 'API权限',
                'db_table': 'api_permission',
            },
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='菜单名')),
                ('icon', models.CharField(blank=True, max_length=50, null=True, verbose_name='图标')),
                ('path', models.CharField(blank=True, max_length=158, null=True, verbose_name='链接地址')),
                ('is_frame', models.BooleanField(default=False, verbose_name='外部菜单')),
                ('is_show', models.BooleanField(default=True, verbose_name='显示标记')),
                ('sort', models.IntegerField(blank=True, null=True, verbose_name='排序标记')),
                ('component', models.CharField(blank=True, max_length=200, null=True, verbose_name='组件')),
                ('pid', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rbac.Menu', verbose_name='父菜单')),
            ],
            options={
                'verbose_name': '菜单',
                'verbose_name_plural': '菜单',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='PerAppName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_key', models.CharField(help_text='APPkey', max_length=64, unique=True, verbose_name='APPkey')),
                ('app_name', models.CharField(help_text='APP名称', max_length=32, verbose_name='APP名称')),
                ('app_desc', models.CharField(help_text='APP应用描述', max_length=32, verbose_name='APP应用描述')),
            ],
            options={
                'db_table': 'pms_app',
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='权限名')),
                ('method', models.CharField(blank=True, max_length=50, null=True, verbose_name='方法')),
                ('pid', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rbac.Permission', verbose_name='父权限')),
            ],
            options={
                'verbose_name': '权限',
                'verbose_name_plural': '权限',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True, verbose_name='角色')),
                ('desc', models.CharField(blank=True, max_length=50, null=True, verbose_name='描述')),
                ('menus', models.ManyToManyField(blank=True, to='rbac.Menu', verbose_name='菜单')),
                ('permissions', models.ManyToManyField(blank=True, to='rbac.Permission', verbose_name='权限')),
            ],
        ),
        migrations.CreateModel(
            name='PmsPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codename', models.CharField(help_text='权限简称', max_length=32, verbose_name='权限简称')),
                ('desc', models.CharField(help_text='权限描述信息', max_length=32, verbose_name='权限描述信息')),
                ('app', models.CharField(help_text='APP名称', max_length=32, verbose_name='APP名称')),
                ('groups', models.ManyToManyField(help_text='用户组关联权限', related_name='pms_group', to='auth.Group', verbose_name='用户组关联权限')),
            ],
            options={
                'db_table': 'pms_permission',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, verbose_name='名称')),
                ('type', models.CharField(choices=[('company', '公司'), ('department', '部门')], default='company', max_length=20, verbose_name='类型')),
                ('pid', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rbac.Organization', verbose_name='父类组织')),
            ],
            options={
                'verbose_name': '组织架构',
                'verbose_name_plural': '组织架构',
            },
        ),
        migrations.CreateModel(
            name='NodeInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node_name', models.CharField(db_index=True, help_text='service名称', max_length=32, verbose_name='节点名称')),
                ('pid', models.IntegerField(db_index=True, help_text='pid', verbose_name='节点pid')),
                ('path_node', models.CharField(db_index=True, help_text='node中文path', max_length=32, verbose_name='节点中文path')),
                ('groups', models.ManyToManyField(help_text='用户组关联节点', related_name='node_group', to='auth.Group', verbose_name='用户组关联节点')),
            ],
            options={
                'db_table': 'pms_node',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ApiPermissionGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('createtime', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updatetime', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('remark', models.TextField(blank=True, default='', null=True, verbose_name='备注')),
                ('name', models.CharField(max_length=32, unique=True, verbose_name='组名')),
                ('api_permissions', models.ManyToManyField(blank=True, related_name='api_permissions', to='rbac.ApiPermission', verbose_name='API权限')),
                ('users', models.ManyToManyField(blank=True, related_name='users', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': 'API权限组',
                'verbose_name_plural': 'API权限组',
                'db_table': 'api_permission_group',
            },
        ),
        migrations.AddField(
            model_name='userprofile',
            name='department',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rbac.Organization', verbose_name='部门'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='roles',
            field=models.ManyToManyField(blank=True, to='rbac.Role', verbose_name='角色'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='superior',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='上级主管'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
